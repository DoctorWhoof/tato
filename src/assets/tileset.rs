use core::array::from_fn;

use tato_video::*;

#[derive(Debug, Clone, Copy, Default, PartialEq, Eq, Hash)]
pub struct TilesetID(pub u8);

/// A collection of tiles and colors. Also keeps track of how a memory bank
/// currently holds that data, so that it can be offloaded.
#[derive(Debug, Clone, Copy)]
pub struct Tileset {
    pub bank_id: u8,
    pub tile_start: u8,
    pub colors: [RGBA12; COLORS_PER_PALETTE as usize],
    pub color_count: u8,
    pub sub_palettes: [[u8; 4]; SUBPALETTE_COUNT as usize],
    pub sub_palette_count: u8,
    pub sub_palettes_start: u8,
    pub sub_palettes_len: u8,
}

/// Generated by tato::Pipeline as a way to convert
/// PNG files into tilesets.
#[derive(Debug, Clone, Copy)]
pub struct TilesetData<'a> {
    pub tiles: &'a [Tile<2>],
    pub colors: Option<&'a [RGBA12]>,
    pub sub_palettes: Option<&'a [&'a [u8; COLORS_PER_TILE as usize]]>,
}

impl Default for Tileset {
    fn default() -> Self {
        Self {
            bank_id: 0,
            tile_start: 0,
            colors: from_fn(|_| RGBA12::default()),
            sub_palettes: from_fn(|_| Default::default()),
            sub_palettes_start: 0,
            sub_palettes_len: 0,
            color_count: 0,
            sub_palette_count: 0,
        }
    }
}
